name: "Build and deploy (via build.yaml)"
on:
  push:
    branches:
      - main2
      - dev2/**
jobs:
  build:
    name: "build"
    runs-on: "ubuntu-20.04"
    permissions:
      packages: write
      repository-projects: write
      contents: write
      id-token: "write"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "actions/setup-java@v4"
        with:
          java-version: "21"
          distribution: "temurin"
      - name: Cache gradle wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-
      - name: "Build and tests"
        run: ./gradlew test build
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker build and push smtp-listeners
        uses: nais/docker-build-push@v0
        id: docker-push-smtp-listeners
        with:
          team: team-emottak # required
          tag: ${{ github.sha }}
          dockerfile: Dockerfile # optional, default Dockerfile
          docker_context: smtp-listeners # optional, default .
          image_suffix: smtp-listener
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }} # required, but is defined as an organization variable
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }} # required, but is defined as an organization secret
      - name: Docker build and push ebms-send-in
        uses: nais/docker-build-push@v0
        id: docker-push-ebms-send-in
        with:
           team: team-emottak # required
           tag: ${{ github.sha }}
           dockerfile: Dockerfile # optional, default Dockerfile
           docker_context: ebms-send-in # optional, default .
           image_suffix: ebms-send-in
           project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }} # required, but is defined as an organization variable
           identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }} # required, but is defined as an organization secret
    outputs:
      listenerimage: ${{ steps.docker-push-smtp-listeners.outputs.image }}
      routerimage: ${{ steps.docker-push-smtp-router.outputs.image }}
      sendinimage: ${{ steps.docker-push-ebms-send-in.outputs.image }}
  deploy-smtp-listeners:
    name: "Deploy smtp-listeners to dev"
    needs: "build"
    runs-on: "ubuntu-20.04"
    steps:
      - uses: "actions/checkout@v4"
      - name: "Deploy secret to DEV"
        uses: "nais/deploy/actions/deploy@v1"
        env:
          "APIKEY": "${{ secrets.NAIS_DEPLOY_APIKEY }}"
          "CLUSTER": "dev-fss"
          "RESOURCE": ".nais/smtp-router-secrets.yaml"
          "VAR": "smtpPassword=${{ secrets.SMTP_PASSWORD }}"
      - name: "Deploy to DEV"
        uses: "nais/deploy/actions/deploy@v1"
        env:
          APIKEY: "${{ secrets.NAIS_DEPLOY_APIKEY }}"
          CLUSTER: "dev-fss"
          RESOURCE: ".nais/smtp-listeners-dev.yaml"
          IMAGE: ${{ needs.build.outputs.listenerimage }}
  deploy-ebms-send-in:
    name: "Deploy ebms-send-in to dev"
    needs: "build"
    runs-on: "ubuntu-20.04"
    steps:
      - uses: "actions/checkout@v4"
      - name: "Deploy secret to DEV"
        uses: "nais/deploy/actions/deploy@v1"
        env:
          "APIKEY": "${{ secrets.NAIS_DEPLOY_APIKEY }}"
          "CLUSTER": "dev-fss"
          "RESOURCE": ".nais/ebms-send-in-secrets.yaml"
          "VAR": "toktPassword=${{ secrets.TOKT_PASSWORD }}"
      - name: "Deploy to DEV"
        uses: "nais/deploy/actions/deploy@v1"
        env:
          APIKEY: "${{ secrets.NAIS_DEPLOY_APIKEY }}"
          CLUSTER: "dev-fss"
          RESOURCE: ".nais/ebms-send-in-dev.yaml"
          IMAGE: ${{ needs.build.outputs.sendinimage }}
