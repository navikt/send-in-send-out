name: "Universal deployer"

on:
  workflow_dispatch:
    inputs:
      project:
        description: "Project to deploy"
        required: true
        type: choice
        options:
          - cpa-sync
          - ebms-send-in
          - ebms-http
          - all
      deploy_to_dev:
        description: "Deploy to dev?"
        required: false
        default: false
        type: boolean
      deploy_to_prod:
        description: "Deploy to PROD?"
        required: false
        default: false
        type: boolean
env:
  CPA_SYNC_MODULE_NAME: "cpa-sync"
  CPA_SYNC_IMAGE_NAME: "ghcr.io/${{ github.repository }}/cpa-sync:${{ github.sha }}"
  EBMS_HTTP_MODULE_NAME: "ebms-http"
  EBMS_HTTP_IMAGE_NAME: "ghcr.io/${{ github.repository }}/ebms-http:${{ github.sha }}"
  EBMS_SEND_IN_MODULE_NAME: "ebms-send-in"
  EBMS_SEND_IN_IMAGE_NAME: "ghcr.io/${{ github.repository }}/ebms-send-in:${{ github.sha }}"

jobs:
  build_cpa_sync:
    name: "Build cpa-sync"
    if: ${{ github.event.inputs.project == 'cpa-sync' || github.event.inputs.project == 'all' }}
    runs-on: "ubuntu-20.04"
    permissions:
      packages: write
      repository-projects: write
      contents: write

    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v4"

      - uses: "actions/setup-java@v4"
        with:
          java-version: 21
          distribution: temurin

      - name: "Cache Gradle wrapper"
        uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: "Cache Gradle packages"
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-

      - name: "Build and test ${{ env.CPA_SYNC_MODULE_NAME }}"
        run: ./gradlew :$CPA_SYNC_MODULE_NAME:test :$CPA_SYNC_MODULE_NAME:build
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Login to GitHub Packages Docker Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Build and push ${{ env.CPA_SYNC_MODULE_NAME }} docker image"
        run: |
          docker build --tag ${{ env.CPA_SYNC_IMAGE_NAME }} -f Dockerfile ${{ env.CPA_SYNC_MODULE_NAME }} --pull
          docker push ${{ env.CPA_SYNC_IMAGE_NAME }}

  deploy_cpa_sync:
    name: "Deploy cpa-sync"
    if: ${{ github.event.inputs.project == 'cpa-sync' || github.event.inputs.project == 'all' }}
    needs: build_cpa_sync
    runs-on: "ubuntu-20.04"
    permissions:
      contents: read
      id-token: write

    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v4"

      - name: "Deploy  ${{ env.CPA_SYNC_MODULE_NAME }} to dev"
        if: ${{ github.event.inputs.deploy_to_dev == 'true' }}
        uses: "nais/deploy/actions/deploy@v2"
        env:
          CLUSTER: "dev-fss"
          RESOURCE: ".nais/cpa-sync-dev.yaml"
          IMAGE: ${{ env.CPA_SYNC_IMAGE_NAME }}

      - name: "Deploy  ${{ env.CPA_SYNC_MODULE_NAME }} to Prod"
        if: ${{ github.event.inputs.deploy_to_prod == 'true' }}
        uses: "nais/deploy/actions/deploy@v2"
        env:
          CLUSTER: "prod-fss"
          RESOURCE: ".nais/cpa-sync-prod.yaml"
          IMAGE: ${{ env.CPA_SYNC_IMAGE_NAME }}
  build_ebms_http:
    name: "Build ebms-http"
    if: ${{ github.event.inputs.project == 'ebms-http'}}
    runs-on: "ubuntu-20.04"
    permissions:
      packages: write
      repository-projects: write
      contents: write

    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v4"

      - uses: "actions/setup-java@v4"
        with:
          java-version: 21
          distribution: temurin

      - name: "Cache Gradle wrapper"
        uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: "Cache Gradle packages"
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-

      - name: "Build and test ${{ env.EBMS_HTTP_MODULE_NAME }}"
        run: ./gradlew :$EBMS_HTTP_MODULE_NAME:test :$EBMS_HTTP_MODULE_NAME:build
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Login to GitHub Packages Docker Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Build and push ${{ env.EBMS_HTTP_MODULE_NAME }} docker image"
        run: |
          docker build --tag ${{ env.EBMS_HTTP_IMAGE_NAME }} -f Dockerfile ${{ env.EBMS_HTTP_MODULE_NAME }} --pull
          docker push ${{ env.EBMS_HTTP_IMAGE_NAME }}
  deploy_ebms_http:
    name: "Deploy ebms-http"
    if: ${{ github.event.inputs.project == 'ebms-http' }}
    needs: build_ebms_http
    runs-on: "ubuntu-20.04"
    permissions:
      contents: read
      id-token: write
    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v4"

      - name: "Deploy  ${{ env.EBMS_HTTP_MODULE_NAME }} to dev"
        if: ${{ github.event.inputs.deploy_to_dev == 'true' }}
        uses: "nais/deploy/actions/deploy@v2"
        env:
          CLUSTER: "dev-fss"
          RESOURCE: ".nais/ebms-http-dev.yaml"
          IMAGE: ${{ env.EBMS_HTTP_IMAGE_NAME }}

      - name: "Deploy  ${{ env.EBMS_HTTP_MODULE_NAME }} to Prod"
        if: ${{ github.event.inputs.deploy_to_prod == 'true' }}
        uses: "nais/deploy/actions/deploy@v2"
        env:
          CLUSTER: "prod-fss"
          RESOURCE: ".nais/ebms-http-prod.yaml"
          IMAGE: ${{ env.EBMS_HTTP_IMAGE_NAME }}
  build_ebms_send_in:
    name: "Build ebms-send-in"
    if: ${{ github.event.inputs.project == 'ebms-send-in' || github.event.inputs.project == 'all' }}
    runs-on: "ubuntu-20.04"
    permissions:
      packages: write
      repository-projects: write
      contents: write

    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v4"

      - uses: "actions/setup-java@v4"
        with:
          java-version: 21
          distribution: temurin

      - name: "Cache Gradle wrapper"
        uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: "Cache Gradle packages"
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-cache-

      - name: "Build and test ${{ env.EBMS_SEND_IN_MODULE_NAME }}"
        run: ./gradlew :$EBMS_SEND_IN_MODULE_NAME:test :$EBMS_SEND_IN_MODULE_NAME:build
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Login to GitHub Packages Docker Registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Build and push ${{ env.EBMS_SEND_IN_MODULE_NAME }} docker image"
        run: |
          docker build --tag ${{ env.EBMS_SEND_IN_IMAGE_NAME }} -f Dockerfile ${{ env.EBMS_SEND_IN_MODULE_NAME }} --pull
          docker push ${{ env.EBMS_SEND_IN_IMAGE_NAME }}

  deploy_ebms_send_in:
    name: "Deploy ebms-send-in"
    if: ${{ github.event.inputs.project == 'ebms-send-in' || github.event.inputs.project == 'all' }}
    needs: build_ebms_send_in
    runs-on: "ubuntu-20.04"
    permissions:
      contents: read
      id-token: write

    steps:
      - name: "Checkout code"
        uses: "actions/checkout@v4"

      - name: "Deploy  ${{ env.EBMS_SEND_IN_MODULE_NAME }} to dev"
        if: ${{ github.event.inputs.deploy_to_dev == 'true' }}
        uses: "nais/deploy/actions/deploy@v2"
        env:
          CLUSTER: "dev-fss"
          RESOURCE: ".nais/ebms-send-in-dev.yaml"
          IMAGE: ${{ env.EBMS_SEND_IN_IMAGE_NAME }}

      - name: "Deploy  ${{ env.EBMS_SEND_IN_MODULE_NAME }} to Prod"
        if: ${{ github.event.inputs.deploy_to_prod == 'true' }}
        uses: "nais/deploy/actions/deploy@v2"
        env:
          CLUSTER: "prod-fss"
          RESOURCE: ".nais/ebms-send-in-prod.yaml"
          IMAGE: ${{ env.EBMS_SEND_IN_IMAGE_NAME }}
